using System;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using Utilities;

namespace CodeGeneration.CSharp;

sealed class CSharpCodeFactory : CodeFactory
{
    public CSharpCodeFactory(ThisAssemblyOptions options)
        : base(options)
    {
    }

    protected override void BeginSourceFile() => _ = Text.AppendLine("// <auto-generated/>");

    protected override void BeginGlobalNamespace()
    {
    }

    protected override void EndGlobalNamespace()
    {
    }

    protected override void XmlSummary(string text)
        => _ = Text
            .AppendLine("/// <summary>")
            .ForEach(
                text.SplitToLines().TrimAll(),
                (sb, line) => sb.Append("/// ").AppendLine(line))
            .AppendLine("/// </summary>");

    protected override void BeginClass(string name, bool isPartial, bool isPublic, bool isStatic)
        => _ = Text
            .AppendIf(isPublic, "public ")
            .AppendIf(isStatic, "static ")
            .AppendIf(isPartial, "partial ")
            .Append("class ")
            .AppendLine(name)
            .AppendLine("{");

    protected override void EndClass() => _ = Text.AppendLine("}");

    protected override void PublicConstant(string name, string? value)
        => _ = Text
            .Append("public const string ")
            .Append(name)
            .Append(" = ")
            .AppendQuoted(value)
            .AppendLine(";");

    protected override void PublicStaticReadOnlyField(string name, string? value)
        => _ = Text
            .Append("public static readonly string ")
            .Append(name)
            .Append(" = ")
            .AppendQuoted(value)
            .AppendLine(";");

    protected override SourceText GetSourceText(ParseOptions parseOptions)
    {
        if (parseOptions is not CSharpParseOptions cSharpParseOptions)
        {
            throw new ArgumentException(
                $"Argument should be an instance of {nameof(CSharpParseOptions)}.",
                nameof(parseOptions));
        }

        return SyntaxFactory.ParseCompilationUnit(Text.ToString(), 0, cSharpParseOptions)
                .NormalizeWhitespace()
                .GetText(Encoding.UTF8);
    }
}
