using System;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis.VisualBasic;
using Microsoft.CodeAnalysis.VisualBasic.Syntax;
using Utilities;

namespace CodeGeneration.VisualBasic;

sealed class VisualBasicThisAssemblyClassFactory : ThisAssemblyClassFactory
{
    public VisualBasicThisAssemblyClassFactory(ThisAssemblyClassFactoryOptions options)
        : base(options)
    {
    }

    protected override void BeginSourceFile()
        => _ = Text
            .AppendLine("' <auto-generated/>")
            .AppendLine("Option Compare Binary")
            .AppendLine("Option Explicit On")
            .AppendLine("Option Infer Off")
            .AppendLine("Option Strict On");

    protected override void BeginGlobalNamespace() => _ = Text.AppendLine("Namespace Global");

    protected override void EndGlobalNamespace() => _ = Text.AppendLine("End Namespace");

    protected override void XmlSummary(string text)
        => _ = Text
            .AppendLine("''' <summary>")
            .ForEach(
                text.SplitToLines().TrimAll(),
                (sb, line) => sb.Append("''' ").AppendLine(line))
            .AppendLine("''' </summary>");

    /*
     * VB has no static classes, so ignore the isStatic parameter
     * and always generate normal (non-static) classes.
     * It's OK in the context of ThisAssembly generators, because generated classes
     * have only static (Shared) members anyway.
     * https://github.com/devlooped/ThisAssembly/discussions/104#discussioncomment-2853760
     */
    protected override void BeginClass(string name, bool isPublic, bool isStatic)
        => _ = Text
            .AppendIf(isPublic, "Public ")
            .Append("Partial Class ")
            .AppendLine(name);

    protected override void EndClass() => _ = Text.AppendLine("End Class");

    protected override void PublicConstant(string name, string? value)
        => _ = Text
            .Append("Public Const ")
            .Append(name)
            .Append(" As String = ")
            .AppendQuoted(value);

    protected override void PublicStaticReadOnlyField(string name, string? value)
        => _ = Text
            .Append("Public Shared ReadOnly ")
            .Append(name)
            .Append(" As String = ")
            .AppendQuoted(value);

    protected override SourceText GetSourceText(ParseOptions parseOptions)
    {
        if (parseOptions is not VisualBasicParseOptions visualBasicParseOptions)
        {
            throw new ArgumentException(
                $"Argument should be an instance of {nameof(VisualBasicParseOptions)}.",
                nameof(parseOptions));
        }

        return SyntaxFactory.ParseCompilationUnit(Text.ToString(), 0, visualBasicParseOptions)
            .NormalizeWhitespace<CompilationUnitSyntax>(true)
            .GetText(Encoding.UTF8);
    }
}
