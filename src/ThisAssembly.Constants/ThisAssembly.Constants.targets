<Project>
  <Import Project="..\..\buildTransitive\Devlooped.Sponsors.targets" Condition="Exists('..\..\buildTransitive\Devlooped.Sponsors.targets')"/>

  <ItemGroup>
    <CompilerVisibleProperty Include="ThisAssemblyNamespace" />

    <CompilerVisibleItemMetadata Include="Constant" MetadataName="ItemType" />
    <CompilerVisibleItemMetadata Include="Constant" MetadataName="Comment" />
    <CompilerVisibleItemMetadata Include="Constant" MetadataName="Value" />
    <CompilerVisibleItemMetadata Include="Constant" MetadataName="Root" />

    <!-- Make sure we're always private to the referencing project. 
         Prevents analyzers from "flowing out" of the referencing project. -->
    <PackageReference Update="ThisAssembly.Constants" PrivateAssets="all" PackTransitive="false" />

    <!-- Brings in the analyzer file to report installation time -->
    <FundingPackageId Include="ThisAssembly.Constants" />
  </ItemGroup>

  <ItemDefinitionGroup>
    <FileConstant>
      <Link />
      <AreaPath />
      <Area />
      <Value />
    </FileConstant>
  </ItemDefinitionGroup>

  <!-- Allows extenders to run before this target to add their @(Constant) and @(FileConstant) items -->
  <Target Name="PrepareConstants">
    <ItemGroup>
      <FileConstant Condition="!$([System.IO.Path]::IsPathRooted('%(RelativeDir)')) OR '%(Link)' != ''">
        <AreaPath Condition="!$([System.IO.Path]::IsPathRooted('%(RelativeDir)'))">%(RelativeDir)%(Filename)</AreaPath>
        <AreaPath Condition="'%(Link)' != ''">$([System.IO.Path]::GetDirectoryName('%(Link)'))$([System.IO.Path]::DirectorySeparatorChar)$([System.IO.Path]::GetFileNameWithoutExtension('%(Link)'))</AreaPath>
        <FileExtension Condition="!$([System.IO.Path]::IsPathRooted('%(RelativeDir)'))">%(Extension)</FileExtension>
        <FileExtension Condition="'%(Link)' != ''">$([System.IO.Path]::GetExtension('%(Link)'))</FileExtension>
      </FileConstant>
      <FileConstant Condition="'%(AreaPath)' != ''">
        <Area>$([MSBuild]::ValueOrDefault('%(AreaPath)', '').Replace('\', '.').Replace('/', '.'))</Area>
        <Value>%(AreaPath)%(FileExtension)</Value>
      </FileConstant>
      <Constant Include="@(FileConstant -> '%(Area)')"
                Condition="'%(FileConstant.Area)' != '' AND '%(FileConstant.Value)' != ''"
                Value="%(FileConstant.Value)"
                Comment="%(FileConstant.Comment)" />
    </ItemGroup>
    <ItemGroup>
      <!-- Normalize newlines to avoid losing content -->
      <Constant Update="@(Constant)">
        <Value>$([MSBuild]::ValueOrDefault('%(Constant.Value)', '').Replace($([System.Environment]::NewLine), '\n'))</Value>
        <Comment>$([MSBuild]::ValueOrDefault('%(Constant.Comment)', '').Replace($([System.Environment]::NewLine), '\n'))</Comment>
      </Constant>
    </ItemGroup>
  </Target>

  <Target Name="_InjectConstantAdditionalFiles"
          BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun"
          DependsOnTargets="PrepareResourceNames;PrepareConstants">
    <ItemGroup>
      <!-- Automatically handle escaping of ; due to https://github.com/dotnet/roslyn/issues/51692 -->
      <Constant Update="@(Constant)" Condition="$([MSBuild]::ValueOrdefault('%(Constant.Value)', '').Contains(';'))">
        <Value>|$([MSBuild]::ValueOrdefault('%(Constant.Value)', '').Replace(';', '|'))|</Value>
      </Constant>

      <AdditionalFiles Include="@(Constant)" />      
    </ItemGroup>
  </Target>

</Project>
