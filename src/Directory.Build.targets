<Project>
  <!-- To extend/change the defaults, create a Directory.targets alongside this file -->

  <PropertyGroup Condition="'$(IsPackable)' == ''">
    <!-- The Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets unconditionally sets 
        PackageId=AssemblyName if no PackageId is provided, and then defaults IsPackable=true if 
        a PackageId is set (?!), meaning that by default everything is packable in Sdk-style 
        projects. 

        The Directory.Build.targets are imported after the user's project properties have been 
        read, and therefore gives us a chance to inspect if an explicit PackageId was provided, 
        before the NuGet SDK target is imported and defaults it. At this point, we can give 
        IsPackable a more sensible default, making it false if no PackageId was provided at this 
        point. -->
    <IsPackable Condition="'$(PackageId)' == ''">false</IsPackable>
    <IsPackable Condition="'$(PackageId)' != ''">true</IsPackable>
  </PropertyGroup>

  <!-- Microsoft.NET.Sdk\targets\Microsoft.NET.DefaultAssemblyInfo.targets does this and is imported 
       before Directory.Build.targets, but it's not imported for .msbuildproj -->
  <PropertyGroup Condition="'$(Version)' == ''">
    <VersionPrefix Condition="'$(VersionPrefix)' == ''">1.0.0</VersionPrefix>
    <Version Condition="'$(VersionSuffix)' != ''">$(VersionPrefix)-$(VersionSuffix)</Version>
    <Version Condition="'$(Version)' == ''">$(VersionPrefix)</Version>
  </PropertyGroup>

  <!-- Append $(PackFolder) directory to output and intermediate paths to prevent bin clashes between targets. -->
  <PropertyGroup Condition="'$(AppendPackFolderToOutputPath)' == 'true' and '$(PackFolder)' != ''">
    <PackFolderPath>$(PackFolder)</PackFolderPath>
    <PackFolderPath Condition="'$(TargetFramework)' != ''">$(PackFolderPath.Replace('\$(TargetFramework)', ''))</PackFolderPath>
    <IntermediateOutputPath>$(IntermediateOutputPath)$(PackFolderPath)\</IntermediateOutputPath>
    <OutputPath>$(OutputPath)$(PackFolderPath)\</OutputPath>
    <OutDir>$(OutputPath)</OutDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Define constant for TF like NET5, NET472, NETSTANDARD2, NETSTANDARD21 -->
    <DefineConstants Condition="'$(TargetFramework)' != '' and '$(TargetFrameworks)' != ''">$(DefineConstants);$(TargetFramework.ToUpperInvariant().TrimEnd('0').TrimEnd('.').Replace('.', ''))</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <!-- Consider the project out of date if any of these files changes -->
    <UpToDateCheck Include="@(PackageFile);@(None);@(Content);@(EmbeddedResource)" />
    <!-- We'll typically use ThisAssembly.Strings instead of the built-in resource manager codegen
         The built-in one can be restored with: <EmbeddedResource Update="@(EmbeddedResource)" Generator="ResXFileCodeGenerator" -->
    <EmbeddedResource Update="@(EmbeddedResource)"  Generator="" />
  </ItemGroup>

  <Target Name="IsPackable" Returns="@(IsPackable)">
    <ItemGroup>
      <IsPackable Include="$(MSBuildProjectFullPath)" IsPackable="$(IsPackable)" PackageId="$(PackageId)" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <!-- Make these available via ThisAssembly.Project -->
    <ProjectProperty Include="RepositorySha" />
    <ProjectProperty Include="RepositoryCommit" />
  </ItemGroup>

  <!-- Make sure the source control info is available before calling source generators -->
  <Target Name="EnsureProjectInformation" BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun" DependsOnTargets="InitializeSourceControlInformation" />

  <Target Name="_InitializeRepositoryProperties" 
          DependsOnTargets="InitializeSourceControlInformation" 
          Condition="'$(SourceControlInformationFeatureSupported)' == 'true'">
    <PropertyGroup>
    </PropertyGroup>    
  </Target>

  <!-- Always append the link to the direct source tree for the current build -->
  <Target Name="UpdatePackageMetadata"
          BeforeTargets="PrepareForBuild;GenerateMSBuildEditorConfigFileShouldRun;GetAssemblyVersion;GetPackageMetadata;GenerateNuspec;Pack"
          DependsOnTargets="InitializeSourceControlInformation"
          Condition="'$(SourceControlInformationFeatureSupported)' == 'true' And
                     '$(IsPackable)' == 'true'">
    <PropertyGroup>
      <Description Condition="'$(SourceRevisionId)' != ''">$(Description)

Built from $(RepositoryUrl)/tree/$(SourceRevisionId.Substring(0, 9))
      </Description>
      <PackageDescription>$(Description)</PackageDescription>

      <!-- The project must specify PublishRepositoryUrl=true in order to publish the URL, in order to prevent inadvertent leak of internal URL. -->
      <RepositoryUrl Condition="'$(RepositoryUrl)' == '' and '$(PublishRepositoryUrl)' == 'true'">$(PrivateRepositoryUrl)</RepositoryUrl>
      <PackageProjectUrl Condition="'$(PackageProjectUrl)' == '' and '$(PublishRepositoryUrl)' == 'true'">$(RepositoryUrl)</PackageProjectUrl>

      <RepositoryCommit Condition="'$(RepositoryCommit)' == ''">$(SourceRevisionId)</RepositoryCommit>
      <RepositorySha Condition="'$(SourceRevisionId)' != ''">$(SourceRevisionId.Substring(0, 9))</RepositorySha>
    </PropertyGroup>
  </Target>

  <!-- Import before UsingTask because first to declare tasks wins -->
  <Import Project="Directory.targets" Condition="Exists('Directory.targets')"/>

  <!--
  ==============================================================
    DumpItems Task
    Helper task useful for quickly inspecting the full metadata
    of arbitrary items in any target.

    Properties:
    - Items: Microsoft.Build.Framework.ITaskItem[] (Input, Required)
    - ItemName: string (Input, Optional)
	==============================================================
  -->
  <UsingTask TaskName="DumpItems" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ItemName />
    </ParameterGroup>
    <Task>
      <Reference Include="Microsoft.Build" />
      <Reference Include="Microsoft.CSharp" />
      <Reference Include="System" />
      <Reference Include="System.Core" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Using Namespace="System" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
			  var itemName = ItemName ?? "Item";
			  if (Items.Length == 0)
				  Log.LogMessage(MessageImportance.High, "No {0} items received to dump.", ItemName ?? "");
			  else
				  Log.LogMessage(MessageImportance.High, "Dumping {0} {1} items.", Items.Length, ItemName ?? "");

			  foreach (var item in Items.OrderBy(i => i.ItemSpec))
			  {
				  Log.LogMessage(MessageImportance.High, "{0}: {1}", itemName, item.ItemSpec);
				  foreach (var name in item.MetadataNames.OfType<string>().OrderBy(_ => _))
				  {
					  try
					  {
						  Log.LogMessage(MessageImportance.High, "\t{0}={1}", name, item.GetMetadata(name));
					  }
					  catch { }
				  }
			  }
      ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
