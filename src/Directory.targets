<Project InitialTargets="SetLocalVersion">

  <ItemGroup>
    <None Update="@(None)" CopyToOutputDirectory="PreserveNewest" />
    <EmbeddedResource Include="@(None -&gt; WithMetadataValue('Extension', '.sbntxt'))" />
    <None Update="@(None -&gt; WithMetadataValue('Extension', '.sbntxt'))" Pack="true" />

    <PackageFile Include="$(MSBuildThisFileDirectory)_._" PackagePath="lib/netstandard2.0/_._" />
    <PackageFile Include="*.props;*.targets" PackagePath="build\$(TargetFramework)\%(Filename)%(Extension)" Visible="true" />
  </ItemGroup>

  <Target Name="PackCopyLocalLockFileAssemblies" Condition="'$(MergeAnalyzerAssemblies)' != 'true'" BeforeTargets="GetPackageContents" DependsOnTargets="ReferenceCopyLocalPathsOutputGroup">
    <ItemGroup>
      <ReferenceCopyLocalAssemblies Include="@(ReferenceCopyLocalPaths)" Condition="'%(Extension)' == '.dll' 
        And !$([MSBuild]::ValueOrDefault('%(FileName)', '').EndsWith('.resources', StringComparison.OrdinalIgnoreCase))
        And !$([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('ThisAssembly', StringComparison.OrdinalIgnoreCase))" />
      <PackCopyLocalAssemblies Include="@(ReferenceCopyLocalAssemblies)" Condition="
        !$([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('Microsoft.CodeAnalysis', StringComparison.OrdinalIgnoreCase)) And
        !$([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('Microsoft.CSharp', StringComparison.OrdinalIgnoreCase)) And
        !$([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('System.', StringComparison.OrdinalIgnoreCase))"
      />
      <!-- Brings in System/Microsoft.IdentityModel, System.Text.Encodings.Web, System.Text.Json  -->
      <PackCopyLocalAssemblies Include="@(ReferenceCopyLocalAssemblies)" Condition="
        $([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('System.IdentityModel', StringComparison.OrdinalIgnoreCase)) Or
        $([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('Microsoft.IdentityModel', StringComparison.OrdinalIgnoreCase)) Or
        $([MSBuild]::ValueOrDefault('%(FileName)', '').StartsWith('System.Text', StringComparison.OrdinalIgnoreCase))"
      />
      <PackageFile Include="@(PackCopyLocalAssemblies)" PackFolder="$(PackFolder)" />
    </ItemGroup>
  </Target>

  <Target Name="SetLocalVersion" Condition="!$(CI)">
    <GetVersion>
      <Output TaskParameter="Version" PropertyName="Version" />
    </GetVersion>
  </Target>

  <UsingTask TaskName="GetVersion" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Version Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="Microsoft.Build.Framework"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var version = this.BuildEngine4.GetRegisteredTaskObject("Version", RegisteredTaskObjectLifetime.Build);
        if (version == null)
        {
            var epoc = DateTime.Parse("2024-03-15");
            var days = Math.Truncate(DateTime.UtcNow.Subtract(epoc).TotalDays);
            var time = Math.Floor(DateTime.UtcNow.TimeOfDay.TotalMinutes);
            version = "42." + days + "." + time;
            this.BuildEngine4.RegisterTaskObject("Version", version, RegisteredTaskObjectLifetime.Build, false);
        }
        Version = (string)version;
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
